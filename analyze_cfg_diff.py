#!/usr/bin/python3

# VCFG Diff Algorithm

# The algorithm must analyse two .cfg files generated by TypeChef
# The output must be a list of (function_name) that were somehow modified
# It should compute changes when
#   1. New nodes are inserted
#   2. Nodes are removed
#   3. Nodes are edited
#   4. Nodes swap positions

import sys

node_id_to_container_map = {}
node_id_to_container_name_strategy_map = {}

# Returns a set of node ids
# As a side effect, it stores the information of the container of each node in the node_id_to_container_map global variable above
def process_nodes(file_path):
    node_id_to_an_ancestor = {}

    node_id_set = set()
    try:
        with open(file_path, 'r') as file:
            for line in file:
                splitted_line = line.strip().split(";")
                if splitted_line[0] != "N":
                    if splitted_line[2] not in node_id_to_an_ancestor:
                        node_id_to_an_ancestor[splitted_line[2]] = []
                    node_id_to_an_ancestor[splitted_line[2]].append(splitted_line[1])
                else:
                # For now, we just skip declarations, as the ID is not the same
                # I must fix that on TypeChef, but it should work for now
                    if splitted_line[2] == "declaration":
                        continue
                    node_id = splitted_line[1]
                    node_id_set.add(node_id)
                    if splitted_line[2] == "function" or splitted_line[2] == "function-inline" or splitted_line[2] == "function-static":
                        container_function_name = splitted_line[-2]
                        node_id_to_container_map[node_id] = {container_function_name}
                        node_id_to_container_name_strategy_map[node_id] = container_function_name
                    else:
                        container_function_name = splitted_line[-2].split("::")[-1]
                        if container_function_name[0] == ':':
                            # We must manually remove the ':' for the cases
                            # in which the content of the line is a 'goto' (that ends in ':')
                            container_function_name = container_function_name[1::]
                        node_id_to_container_name_strategy_map[node_id] = container_function_name
    except Exception as e:
        print(f"Error reading file {file_path}: {e}")
    for node_id in node_id_set:
        container_function_name = set()
        visited = set()
        to_visit = [node_id]
        while len(to_visit) > 0:
            current_node_id = to_visit.pop()
            visited.add(current_node_id)
            if current_node_id in node_id_to_container_map:
                container_function_name.update(node_id_to_container_map[current_node_id])
            else:
                if current_node_id in node_id_to_an_ancestor and len(list(filter(lambda x: x not in visited, node_id_to_an_ancestor[current_node_id]))) > 0:
                    to_visit.extend(list(filter(lambda x: x not in visited, node_id_to_an_ancestor[current_node_id])))
        container_function_name.add(node_id_to_container_name_strategy_map[node_id])
        node_id_to_container_map[node_id] = container_function_name
    return node_id_set

def main():
    if len(sys.argv) != 3:
        print("Usage: python script.py <file1> <file2>")
        sys.exit(1)

    file1, file2 = sys.argv[1], sys.argv[2]

    nodes_in_first_file = process_nodes(file1)
    nodes_in_second_file = process_nodes(file2)
    # print ("First file:") 
    # for node1 in nodes_in_first_file:
    #     if node_id_to_container_map[node1] == "ping":
    #         print(node1)
    # print ("Second file:")
    # for node2 in nodes_in_second_file:
    #     if node_id_to_container_map[node2] == "ping":
    #         print(node2)
    # print(node_id_to_container_map["-763689066"])
    # print("diffs:")
    # i = 0
    # for eita in node_id_to_container_map.items():
    #     print(eita)
    new_nodes = nodes_in_second_file.difference(nodes_in_first_file)
    removed_nodes = nodes_in_first_file.difference(nodes_in_second_file)
    changes_ids = new_nodes.union(removed_nodes)
    result = set()
    for change_id in changes_ids:
        result.update(node_id_to_container_map[change_id])
    for changed_function in result:
        print(changed_function)

if __name__ == "__main__":
    main()
    
